ultron_disks:
  timer:
    ultron_disks:
      duration: "00:05:00"

  alert:
    ultron_disks_are_hot:
      name: "Перегрев дисков"
      done_message: '{{"\U0001F4BF"}} Диски вернулись к нормальным темепературам'
      entity_id: binary_sensor.ultron_disks_are_hot
      state: "on"
      repeat: 10
      can_acknowledge: true
      skip_first: false
      message: |
        {{"\U0001F4C0"}} Обнаружен перегрев дисков
        {{"\U0001F5B4"}} Ultron Parity Disk - {{ states('sensor.ultron_parity_disk_temperature') }} °C ({{ states('sensor.ultron_parity_disk_state') }})
        {{"\U0001F5B4"}} Ultron Disk 1 - {{ states('sensor.ultron_disk_1_temperature') }} °C ({{ states('sensor.ultron_disk_1_state') }})
        {{"\U0001F5B4"}} Ultron Disk 2 - {{ states('sensor.ultron_disk_2_temperature') }} °C ({{ states('sensor.ultron_disk_1_state') }})
      notifiers:
        - tg_valaz
        - mobile_app_iphone_12_az

  binary_sensor:
    - platform: template
      sensors:
        ultron_disk_parity_is_hot:
          friendly_name: "Parity Disk горячий"
          value_template: >-
            {% set temp = states('sensor.ultron_parity_disk_temperature') | float %}
            {% set state = states('sensor.ultron_parity_disk_state') %}
            {{ temp > 44 and state != 'standby' }}

        ultron_disk_1_is_hot:
          friendly_name: "Disk 1 горячий"
          value_template: >-
            {% set temp = states('sensor.ultron_disk_1_temperature') | float %}
            {% set state = states('sensor.ultron_disk_1_state') %}
            {{ temp > 44 and state != 'standby' }}

        ultron_disk_2_is_hot:
          friendly_name: "Disk 2 горячий"
          value_template: >-
            {% set temp = states('sensor.ultron_disk_2_temperature') | float %}
            {% set state = states('sensor.ultron_disk_2_state') %}
            {{ temp > 44 and state != 'standby' }}

        ultron_disks_are_hot:
          friendly_name: "Диски горячие"
          value_template: >-
            {{ is_state('binary_sensor.ultron_disk_parity_is_hot', 'on') or is_state('binary_sensor.ultron_disk_1_is_hot', 'on') or is_state('binary_sensor.ultron_disk_2_is_hot', 'on') }}

        ultron_parity_check_in_progress:
          friendly_name: "Parity-Check in progress"
          value_template: >-
            {{ states('sensor.ultron_parity_progress') | float > 0 }}

  sensor:
    - platform: template
      sensors:
        c_192_168_1_11_rootfs_array_disk_used:
          unit_of_measurement: "GiB"
          device_class: data_size
          value_template: >
            {{ (states('sensor.192_168_1_11_rootfs_disk1_disk_used') | float) + (states('sensor.192_168_1_11_rootfs_disk2_disk_used') | float) }}
        c_192_168_1_11_rootfs_array_disk_free:
          unit_of_measurement: "GiB"
          device_class: data_size
          value_template: >
            {{ (states('sensor.192_168_1_11_rootfs_disk1_disk_free') | float) + (states('sensor.192_168_1_11_rootfs_disk2_disk_free') | float) }}
        c_192_168_1_11_rootfs_array_disk_usage:
          unit_of_measurement: "%"
          value_template: >
            {% set array_total_size = (states('sensor.c_192_168_1_11_rootfs_array_disk_used') | float) + (states('sensor.c_192_168_1_11_rootfs_array_disk_free') | float) %}
            {% set array_used_size = states('sensor.c_192_168_1_11_rootfs_array_disk_used') | float %}
            {{ (array_used_size / array_total_size * 100.0 | float) | round(2) }}

    - platform: history_stats
      name: Ultron Parity Disk Standby Time
      entity_id: sensor.ultron_parity_disk_state
      state: "standby"
      type: time
      start: "{{ today_at() }}"
      end: "{{ now() }}"
    - platform: history_stats
      name: Ultron Parity Disk Standby Ratio
      entity_id: sensor.ultron_parity_disk_state
      state: "standby"
      type: ratio
      start: "{{ today_at() }}"
      end: "{{ now() }}"
    - platform: history_stats
      name: Ultron Disk 1 Standby Time
      entity_id: sensor.ultron_disk_1_state
      state: "standby"
      type: time
      start: "{{ today_at() }}"
      end: "{{ now() }}"
    - platform: history_stats
      name: Ultron Disk 1 Standby Ratio
      entity_id: sensor.ultron_disk_1_state
      state: "standby"
      type: ratio
      start: "{{ today_at() }}"
      end: "{{ now() }}"
    - platform: history_stats
      name: Ultron Disk 2 Standby Time
      entity_id: sensor.ultron_disk_2_state
      state: "standby"
      type: time
      start: "{{ today_at() }}"
      end: "{{ now() }}"
    - platform: history_stats
      name: Ultron Disk 2 Standby Ratio
      entity_id: sensor.ultron_disk_2_state
      state: "standby"
      type: ratio
      start: "{{ today_at() }}"
      end: "{{ now() }}"

  shell_command:
    ultron_spinup_disk1: 'ssh -i /config/ultron.key -o StrictHostKeyChecking=no root@192.168.1.11 -T "uptime > /mnt/disk1/share/hass-disk1-check.txt"'
    ultron_spinup_disk2: 'ssh -i /config/ultron.key -o StrictHostKeyChecking=no root@192.168.1.11 -T "uptime > /mnt/disk2/share/hass-disk2-check.txt"'

  automation:
    - alias: "Start Telegram for Transmission"
      trigger:
        - platform: state
          entity_id: switch.c_ultron_docker_transmission
        - platform: state
          entity_id: switch.c_ultron_docker_transmission_telegram
      condition:
        - condition: and
          conditions:
            - condition: state
              entity_id: switch.c_ultron_docker_transmission
              state: "on"
            - condition: state
              entity_id: switch.c_ultron_docker_transmission_telegram
              state: "off"
      action:
        - service: switch.turn_on
          target:
            entity_id: switch.c_ultron_docker_transmission_telegram

    - alias: "[Ultron] Start Disks timer when disks are hot"
      trigger:
        - platform: state
          entity_id: binary_sensor.ultron_disks_are_hot
          to: "on"
      action:
        - service: timer.start
          target:
            entity_id: timer.ultron_disks

    - alias: "[Ultron] Spinup Disks when they are still hot"
      trigger:
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.ultron_disks
      condition:
        condition: state
        entity_id: binary_sensor.ultron_disks_are_hot
        state: "on"
      action:
        - service: shell_command.ultron_spinup_disk1
        - service: shell_command.ultron_spinup_disk2
        - service: timer.cancel
          target:
            entity_id: timer.ultron_disks
        - service: timer.start
          target:
            entity_id: timer.ultron_disks
